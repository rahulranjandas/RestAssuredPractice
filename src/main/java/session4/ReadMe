Running a local API
--------------------
- Similar approach as earlier.
- Create a books.json with below content.
- execute the following cmd: json-server books.json
- endpoint exposed - https://localhost:3000/books
- Json Payload
{
	"books": [
		{
			"author": "Nigel Rees",
			"category": "reference",
			"price": 150.5,
			"title": "Sayings of the Century",
			"id": "9043"
		},
		{
			"author": "Evelyn Waugh",
			"category": "fiction",
			"price": 100,
			"title": "Sword of Honour",
			"id": "41b7"
		},
		{
			"author": "Herman Melville",
			"category": "fiction",
			"isbn": "0-553-21311-3",
			"price": 75.5,
			"title": "Moby Dick",
			"id": "b859"
		},
		{
			"author": "J. R. R. Tolkien",
			"category": "fiction",
			"isbn": "0-395-19395-8",
			"price": 200,
			"title": "The Lord of the Rings",
			"id": "371d"
		}
	]
}

Parsing the Response JSON
--------------------------
- Directly Access using [3].title for the title - "The Lord of the Rings
- Parse JSON format data using the Response Interface.
- Another approach for extracting the titles - use .getList() and store it in a list. Now iterate and match the pattern of the title, if found display it.
- Another approach for extracting the titles - use streams.
        titles.stream()
                .filter(title -> title.equalsIgnoreCase("The Lord of the Rings"))
                .findFirst()
                .ifPresent(title -> System.out.println("Title Found: " + title));
- Write a searching algorithm
- Another approach for extracting titles is using JSONArray object to read JSON Array or use JSONObject to read a JSON Object and iterate around the list of objects to get title.
- Similarly another use-case is to calculate the total price and add assertions.